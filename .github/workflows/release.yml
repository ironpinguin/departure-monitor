name: Release Build and Deploy

on:
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: departure-monitor
  CONTAINER_PORT: 80
  HOST_PORT: 8080

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.description=Monitor for departure public transportation
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.version=${{ github.ref_name }}
            org.opencontainers.image.created=${{ github.event.repository.updated_at }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Generate build summary
        if: steps.build.outcome == 'success'
        run: |
          echo "## 🚀 Release Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Release Tag:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Docker Images:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Platforms:** linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Usage:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker run -p ${{ env.HOST_PORT }}:${{ env.CONTAINER_PORT }} ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Update release with Docker info
        if: steps.build.outcome == 'success'
        uses: actions/github-script@v7
        with:
          retries: 3
          retry-exempt-status-codes: 400,401,403,404,422
          script: |
            try {
              const release = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: context.ref.replace('refs/tags/', '')
              });
              
              const dockerInfo = `

              ## 🐳 Docker Images

              This release is available as multi-platform Docker images:

              **Pull the image:**
              \`\`\`bash
              docker pull ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
              \`\`\`

              **Run the container:**
              \`\`\`bash
              docker run -p ${{ env.HOST_PORT }}:${{ env.CONTAINER_PORT }} ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
              \`\`\`

              **Supported Platforms:**
              - linux/amd64
              - linux/arm64

              **Access the application:** http://localhost:${{ env.HOST_PORT }}
              `;

              await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.data.id,
                body: release.data.body + dockerInfo
              });
              
              console.log('Successfully updated release with Docker information');
            } catch (error) {
              console.error('Failed to update release:', error.message);
              core.setFailed(`Failed to update release: ${error.message}`);
            }

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: needs.build-and-push.result == 'success'
    
    steps:
      - name: Run Trivy vulnerability scanner
        id: trivy-scan
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && steps.trivy-scan.outcome != 'skipped'
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Generate security scan summary
        if: always() && steps.trivy-scan.outcome != 'skipped'
        run: |
          echo "## 🛡️ Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.trivy-scan.outcome }}" == "success" ]; then
            echo "✅ Vulnerability scan completed successfully" >> $GITHUB_STEP_SUMMARY
            echo "📊 Results uploaded to GitHub Security tab" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Vulnerability scan failed" >> $GITHUB_STEP_SUMMARY
            echo "Please check the logs for more details" >> $GITHUB_STEP_SUMMARY
          fi