name: Release Build and Deploy

on:
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: departure-monitor
  CONTAINER_PORT: 80
  HOST_PORT: 8080
  NODE_VERSION: '22'
  PNPM_VERSION: 10.12.4

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.description=Monitor for departure public transportation
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.version=${{ github.ref_name }}
            org.opencontainers.image.created=${{ github.event.repository.updated_at }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Generate build summary
        if: steps.build.outcome == 'success'
        run: |
          echo "## üöÄ Release Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Release Tag:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Docker Images:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Platforms:** linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Usage:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker run -p ${{ env.HOST_PORT }}:${{ env.CONTAINER_PORT }} ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Update release with Docker info
        if: steps.build.outcome == 'success'
        uses: actions/github-script@v7
        with:
          retries: 3
          retry-exempt-status-codes: 400,401,403,404,422
          script: |
            try {
              const release = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: context.ref.replace('refs/tags/', '')
              });
              
              const dockerInfo = `

              ## üê≥ Docker Images

              This release is available as multi-platform Docker images:

              **Pull the image:**
              \`\`\`bash
              docker pull ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
              \`\`\`

              **Run the container:**
              \`\`\`bash
              docker run -p ${{ env.HOST_PORT }}:${{ env.CONTAINER_PORT }} ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
              \`\`\`

              **Supported Platforms:**
              - linux/amd64
              - linux/arm64

              **Access the application:** http://localhost:${{ env.HOST_PORT }}
              `;

              await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.data.id,
                body: release.data.body + dockerInfo
              });
              
              console.log('Successfully updated release with Docker information');
            } catch (error) {
              console.error('Failed to update release:', error.message);
              core.setFailed(`Failed to update release: ${error.message}`);
            }

  create-release-artifacts:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Create release archives
        id: create-archives
        run: |
          pnpm run release
          
          # Extract version from package.json
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Set archive paths
          echo "zip-path=releases/departure-monitor-v$VERSION.zip" >> $GITHUB_OUTPUT
          echo "tar-path=releases/departure-monitor-v$VERSION.tar.gz" >> $GITHUB_OUTPUT

      - name: Upload release assets
        uses: actions/github-script@v7
        with:
          retries: 3
          retry-exempt-status-codes: 400,401,403,404,422
          script: |
            const fs = require('fs');
            const path = require('path');
            
            try {
              // Get the release
              const release = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: context.ref.replace('refs/tags/', '')
              });
              
              const version = '${{ steps.create-archives.outputs.version }}';
              const zipPath = '${{ steps.create-archives.outputs.zip-path }}';
              const tarPath = '${{ steps.create-archives.outputs.tar-path }}';
              
              // Upload ZIP archive
              console.log('Uploading ZIP archive...');
              const zipData = fs.readFileSync(zipPath);
              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.data.id,
                name: `departure-monitor-v${version}.zip`,
                data: zipData,
                headers: {
                  'content-type': 'application/zip',
                  'content-length': zipData.length
                }
              });
              console.log('‚úÖ ZIP archive uploaded successfully');
              
              // Upload TAR.GZ archive
              console.log('Uploading TAR.GZ archive...');
              const tarData = fs.readFileSync(tarPath);
              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.data.id,
                name: `departure-monitor-v${version}.tar.gz`,
                data: tarData,
                headers: {
                  'content-type': 'application/gzip',
                  'content-length': tarData.length
                }
              });
              console.log('‚úÖ TAR.GZ archive uploaded successfully');
              
            } catch (error) {
              console.error('Failed to upload release assets:', error.message);
              core.setFailed(`Failed to upload release assets: ${error.message}`);
            }

      - name: Update release with artifact info
        uses: actions/github-script@v7
        with:
          retries: 3
          retry-exempt-status-codes: 400,401,403,404,422
          script: |
            try {
              const release = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: context.ref.replace('refs/tags/', '')
              });
              
              const version = '${{ steps.create-archives.outputs.version }}';
              const artifactInfo = `

              ## üì¶ Release Artifacts

              This release includes pre-built application archives ready for deployment:

              **Available Downloads:**
              - üìÅ **ZIP Archive**: \`departure-monitor-v${version}.zip\`
              - üìÅ **TAR.GZ Archive**: \`departure-monitor-v${version}.tar.gz\`

              **Quick Start:**
              1. Download one of the archives above
              2. Extract the archive to your desired location
              3. Serve the \`departure-monitor\` folder with any web server

              **Example with Python:**
              \`\`\`bash
              # Extract the archive
              unzip departure-monitor-v${version}.zip
              # or: tar -xzf departure-monitor-v${version}.tar.gz

              # Serve with Python
              cd departure-monitor
              python3 -m http.server 8080
              \`\`\`

              **Example with nginx:**
              \`\`\`bash
              # Extract to web root
              sudo unzip departure-monitor-v${version}.zip -d /var/www/html/
              # Access via: http://your-server/departure-monitor
              \`\`\`
              `;

              await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.data.id,
                body: release.data.body + artifactInfo
              });
              
              console.log('Successfully updated release with artifact information');
            } catch (error) {
              console.error('Failed to update release:', error.message);
              core.setFailed(`Failed to update release: ${error.message}`);
            }

      - name: Generate artifact summary
        run: |
          echo "## üì¶ Release Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** \`v${{ steps.create-archives.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Available Downloads:**" >> $GITHUB_STEP_SUMMARY
          echo "- üìÅ \`departure-monitor-v${{ steps.create-archives.outputs.version }}.zip\` - ZIP Archive" >> $GITHUB_STEP_SUMMARY
          echo "- üìÅ \`departure-monitor-v${{ steps.create-archives.outputs.version }}.tar.gz\` - TAR.GZ Archive" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Installation:**" >> $GITHUB_STEP_SUMMARY
          echo "1. Download one of the archives above" >> $GITHUB_STEP_SUMMARY
          echo "2. Extract the archive" >> $GITHUB_STEP_SUMMARY
          echo "3. Serve the \`departure-monitor\` folder with a web server" >> $GITHUB_STEP_SUMMARY

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: needs.build-and-push.result == 'success'
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Run Trivy vulnerability scanner
        id: trivy-scan
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && steps.trivy-scan.outcome != 'skipped'
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Generate security scan summary
        if: always() && steps.trivy-scan.outcome != 'skipped'
        run: |
          echo "## üõ°Ô∏è Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.trivy-scan.outcome }}" == "success" ]; then
            echo "‚úÖ Vulnerability scan completed successfully" >> $GITHUB_STEP_SUMMARY
            echo "üìä Results uploaded to GitHub Security tab" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Vulnerability scan failed" >> $GITHUB_STEP_SUMMARY
            echo "Please check the logs for more details" >> $GITHUB_STEP_SUMMARY
          fi